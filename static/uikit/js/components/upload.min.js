/*! For license information please see upload.min.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&typeof module<"u"?module.exports=t(require("uikit-util")):"function"==typeof define&&define.amd?define("uikitupload",["uikit-util"],t):(e=typeof globalThis<"u"?globalThis:e||self).UIkitUpload=t(e.UIkit.util)}(this,(function(e){"use strict";var t={mixins:[{props:{i18n:Object},data:{i18n:null},methods:{t(e,...t){var o,i,r;let s=0;return(null==(r=(null==(o=this.i18n)?void 0:o[e])||(null==(i=this.$options.i18n)?void 0:i[e]))?void 0:r.replace(/%s/g,(()=>t[s++]||"")))||""}}}],i18n:{invalidMime:"Invalid File Type: %s",invalidName:"Invalid File Name: %s",invalidSize:"Invalid File Size: %s Kilobytes Max"},props:{allow:String,clsDragover:String,concurrent:Number,maxSize:Number,method:String,mime:String,multiple:Boolean,name:String,params:Object,type:String,url:String},data:{allow:!1,clsDragover:"uk-dragover",concurrent:1,maxSize:0,method:"POST",mime:!1,multiple:!1,name:"files[]",params:{},type:"",url:"",abort:e.noop,beforeAll:e.noop,beforeSend:e.noop,complete:e.noop,completeAll:e.noop,error:e.noop,fail:e.noop,load:e.noop,loadEnd:e.noop,loadStart:e.noop,progress:e.noop},events:{change(t){e.matches(t.target,'input[type="file"]')&&(t.preventDefault(),t.target.files&&this.upload(t.target.files),t.target.value="")},drop(t){i(t);const o=t.dataTransfer;null!=o&&o.files&&(e.removeClass(this.$el,this.clsDragover),this.upload(o.files))},dragenter(e){i(e)},dragover(t){i(t),e.addClass(this.$el,this.clsDragover)},dragleave(t){i(t),e.removeClass(this.$el,this.clsDragover)}},methods:{async upload(t){if(!(t=e.toArray(t)).length)return;e.trigger(this.$el,"upload",[t]);for(const e of t){if(this.maxSize&&1e3*this.maxSize<e.size)return void this.fail(this.t("invalidSize",this.maxSize));if(this.allow&&!o(this.allow,e.name))return void this.fail(this.t("invalidName",this.allow));if(this.mime&&!o(this.mime,e.type))return void this.fail(this.t("invalidMime",this.mime))}this.multiple||(t=t.slice(0,1)),this.beforeAll(this,t);const i=function(e,t){const o=[];for(let i=0;i<e.length;i+=t)o.push(e.slice(i,i+t));return o}(t,this.concurrent),r=async t=>{const o=new FormData;t.forEach((e=>o.append(this.name,e)));for(const e in this.params)o.append(e,this.params[e]);try{const t=await function(t,o){const i={data:null,method:"GET",headers:{},xhr:new XMLHttpRequest,beforeSend:e.noop,responseType:"",...o};return Promise.resolve().then((()=>i.beforeSend(i))).then((()=>function(t,o){return new Promise(((i,r)=>{const{xhr:s}=o;for(const e in o)if(e in s)try{s[e]=o[e]}catch{}s.open(o.method.toUpperCase(),t);for(const e in o.headers)s.setRequestHeader(e,o.headers[e]);e.on(s,"load",(()=>{0===s.status||s.status>=200&&s.status<300||304===s.status?i(s):r(e.assign(Error(s.statusText),{xhr:s,status:s.status}))})),e.on(s,"error",(()=>r(e.assign(Error("Network Error"),{xhr:s})))),e.on(s,"timeout",(()=>r(e.assign(Error("Network Timeout"),{xhr:s})))),s.send(o.data)}))}(t,i)))}(this.url,{data:o,method:this.method,responseType:this.type,beforeSend:t=>{const{xhr:o}=t;e.on(o.upload,"progress",this.progress);for(const t of["loadStart","load","loadEnd","abort"])e.on(o,t.toLowerCase(),this[t]);return this.beforeSend(t)}});this.complete(t),i.length?await r(i.shift()):this.completeAll(t)}catch(e){this.error(e)}};await r(i.shift())}}};function o(e,t){return t.match(new RegExp(`^${e.replace(/\//g,"\\/").replace(/\*\*/g,"(\\/[^\\/]+)*").replace(/\*/g,"[^\\/]+").replace(/((?!\\))\?/g,"$1.")}$`,"i"))}function i(e){e.preventDefault(),e.stopPropagation()}return typeof window<"u"&&window.UIkit&&window.UIkit.component("upload",t),t}));